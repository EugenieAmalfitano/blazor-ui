@inherits LayoutComponentBase

@inject NavigationManager _navMan

<TelerikRootComponent>

    <TelerikDrawer Class="drawer-leftnav" Data="@NavigablePages" @bind-Expanded="@DrawerExpanded" MiniMode="true" Mode="@DrawerMode.Push" @ref="@DrawerRef" @bind-SelectedItem="@SelectedItem">
        <Content>
            @* This layout is now in the drawer Content, and is very similar to the default template layout *@
            <div class="main">
                @* This is the button to collapse/expand the drawer, in this sample it is positioned absolutely so it moves with the drawer and stays above the rest of the content *@
                <TelerikButton OnClick="@( () => DrawerRef.ToggleAsync() )" Icon="@IconName.Menu" Class="drawer-hamburger"></TelerikButton>
        
                <div class="top-row ">
                    <a href="https://docs.microsoft.com/en-us/aspnet/" target="_blank">About</a>
                </div>

                <div class="content">
                    @Body
                </div>
            </div>
        </Content>
    </TelerikDrawer>

</TelerikRootComponent>

@code{
    bool DrawerExpanded { get; set; } = true;
    DrawerItem SelectedItem { get; set; }
    TelerikDrawer<DrawerItem> DrawerRef { get; set; }

    // in this sample we hardcode the existing pages, in your case you can
    // create the list based on your business logic (e.g., based on user roles/access)
    List<DrawerItem> NavigablePages { get; set; } = new List<DrawerItem>
    {
        new DrawerItem { Text = "Home", Url = "/", Icon = "home" },
        new DrawerItem { IsSeparator = true, Url=string.Empty },//define a URL to separators to make the pre-selection logic easier
        new DrawerItem { Text = "Counter", Url = "counter", Icon = IconName.PlusOutline },
        new DrawerItem { Text = "FetchData", Url = "fetchdata", Icon = IconName.Grid }
    };

    protected override void OnInitialized()
    {
        // pre-select the page the user lands on
        // as the user clicks items, the DOM changes only in the Body and so the selected item stays active
        string currPage = _navMan.Uri;
        DrawerItem ActivePage = NavigablePages.Where(p => p.Url.ToLowerInvariant() == GetCurrentPage().ToLowerInvariant()).FirstOrDefault();
        if(ActivePage != null)
        {
            SelectedItem = ActivePage;
        }

        base.OnInitialized();
    }

    public string GetCurrentPage()
    {
        string uriWithoutQueryString = _navMan.Uri.Split("?")[0];
        string currPage = uriWithoutQueryString.Substring(Math.Min(_navMan.Uri.Length, _navMan.BaseUri.Length));
        return string.IsNullOrWhiteSpace(currPage) ? "/" : currPage;
    }

    // generally, this should go into its own file, but it is here to keep all the drawer-related code in one place
    public class DrawerItem
    {
        public string Text { get; set; }
        public string Url { get; set; }
        public string Icon { get; set; }
        public bool IsSeparator { get; set; }
    }
}